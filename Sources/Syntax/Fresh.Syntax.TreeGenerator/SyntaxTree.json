{
  "usings": [
    "System",
    "System.Collections.Generic",
    "System.Diagnostics.CodeAnalysis",
    "System.Linq",
    "System.Text",
    "Fresh.Common"
  ],
  "namespace": "Fresh.Syntax",
  "factory": "SyntaxFactory",
  "root": "SyntaxNode",
  "builtins": [],
  "nodes": [
    {
      "name": "SyntaxToken",
      "isStruct": true,
      "base": "ISyntaxElement",
      "doc": "Represents a single token with trivia as part of the syntax tree.",
      "factoryHintName": "Token",
      "fields": [
        {
          "name": "LeadingTrivia",
          "type": "Sequence<Token>",
          "doc": "The trivia that comes before this token in the syntax tree."
        },
        {
          "name": "Token",
          "type": "Token",
          "doc": "The token itself that is the significant part of the tree."
        },
        {
          "name": "TrailingTrivia",
          "type": "Sequence<Token>",
          "doc": "The trivia that comes after this token in the syntax tree."
        }
      ]
    },
    {
      "name": "StatementSyntax",
      "doc": "The base for all statement syntax nodes.",
      "base": "SyntaxNode",
      "isAbstract": true
    },
    {
      "name": "ExpressionSyntax",
      "doc": "The base for all expression syntax nodes.",
      "base": "SyntaxNode",
      "isAbstract": true
    },
    {
      "name": "TypeSyntax",
      "doc": "The base for all type syntax nodes.",
      "base": "ExpressionSyntax",
      "isAbstract": true
    },
    {
      "name": "DeclarationSyntax",
      "doc": "The base for all declaration syntax nodes.",
      "base": "StatementSyntax",
      "isAbstract": true
    },
    {
      "name": "ModuleDeclarationSyntax",
      "doc": "A full, parsed module containing all of its declarations.",
      "base": "DeclarationSyntax",
      "fields": [
        {
          "name": "Declarations",
          "type": "SyntaxSequence<DeclarationSyntax>",
          "doc": "The declarations contained in the module."
        },
        {
          "name": "End",
          "type": "SyntaxToken",
          "doc": "The end of file token."
        }
      ]
    },
    {
      "name": "FunctionDeclarationSyntax",
      "doc": "A function declaration.",
      "base": "DeclarationSyntax",
      "fields": [
        {
          "name": "FuncKeyword",
          "type": "SyntaxToken",
          "doc": "The function keyword."
        },
        {
          "name": "Name",
          "type": "SyntaxToken",
          "doc": "The name of the function."
        },
        {
          "name": "ParameterList",
          "type": "ParameterListSyntax",
          "doc": "The parameters of the function."
        },
        {
          "name": "TypeSpecifier",
          "type": "TypeSpecifierSyntax",
          "isOptional": true,
          "doc": "The return type specifier."
        },
        {
          "name": "Body",
          "type": "SyntaxNode",
          "doc": "The body of the function."
        }
      ]
    },
    {
      "name": "ParameterListSyntax",
      "doc": "A list of parameters for a function declaration.",
      "base": "SyntaxNode",
      "fields": [
        {
          "name": "OpenParenthesis",
          "type": "SyntaxToken",
          "doc": "The open parenthesis token."
        },
        {
          "name": "Parameters",
          "type": "SyntaxSequence<ParameterSyntax>",
          "doc": "The parameters of the function."
        },
        {
          "name": "CloseParenthesis",
          "type": "SyntaxToken",
          "doc": "The close parenthesis token."
        }
      ]
    },
    {
      "name": "ParameterSyntax",
      "doc": "Syntax for a single parameter in a function declaration.",
      "base": "SyntaxNode",
      "fields": [
        {
          "name": "Name",
          "type": "SyntaxToken",
          "doc": "The name of the parameter."
        },
        {
          "name": "TypeSpecifier",
          "type": "TypeSpecifierSyntax",
          "doc": "The type specifier of the parameter."
        },
        {
          "name": "Comma",
          "type": "SyntaxToken",
          "doc": "The comma token.",
          "isOptional": true
        }
      ]
    },
    {
      "name": "ArgumentListSyntax",
      "doc": "A list of arguments for a function call.",
      "base": "SyntaxNode",
      "fields": [
        {
          "name": "OpenParenthesis",
          "type": "SyntaxToken",
          "doc": "The open parenthesis token."
        },
        {
          "name": "Arguments",
          "type": "SyntaxSequence<ArgumentSyntax>",
          "doc": "The argument values."
        },
        {
          "name": "CloseParenthesis",
          "type": "SyntaxToken",
          "doc": "The close parenthesis token."
        }
      ]
    },
    {
      "name": "ArgumentSyntax",
      "doc": "A single argument for a function call.",
      "base": "SyntaxNode",
      "fields": [
        {
          "name": "Expression",
          "type": "ExpressionSyntax",
          "doc": "The expression to pass as an argument."
        },
        {
          "name": "Comma",
          "type": "SyntaxToken",
          "doc": "The comma token.",
          "isOptional": true
        }
      ]
    },
    {
      "name": "TypeSpecifierSyntax",
      "doc": "Syntax for specifying a type of a parameter or a variable.",
      "base": "SyntaxNode",
      "fields": [
        {
          "name": "Colon",
          "type": "SyntaxToken",
          "doc": "The colon token."
        },
        {
          "name": "Type",
          "type": "TypeSyntax",
          "doc": "The specified type."
        }
      ]
    },
    {
      "name": "ValueSpecifierSyntax",
      "doc": "Syntax for specifying a value of a parameter or variable.",
      "base": "SyntaxNode",
      "fields": [
        {
          "name": "Assign",
          "type": "SyntaxToken",
          "doc": "The assignment token."
        },
        {
          "name": "Value",
          "type": "ExpressionSyntax",
          "doc": "The specified value."
        },
        {
          "name": "Semicolon",
          "type": "SyntaxToken",
          "doc": "The semicolon token.",
          "isOptional": true
        }
      ]
    },
    {
      "name": "ExpressionStatementSyntax",
      "doc": "A statement that contains an expression.",
      "base": "StatementSyntax",
      "fields": [
        {
          "name": "Expression",
          "type": "ExpressionSyntax",
          "doc": "The expression contained in the statement."
        },
        {
          "name": "Semicolon",
          "type": "SyntaxToken",
          "doc": "The semicolon token.",
          "isOptional": true
        }
      ]
    },
    {
      "name": "VariableDeclarationSyntax",
      "doc": "A variable declaration.",
      "base": "DeclarationSyntax",
      "fields": [
        {
          "name": "VarKeyword",
          "type": "SyntaxToken",
          "doc": "The var or val keyword."
        },
        {
          "name": "Name",
          "type": "SyntaxToken",
          "doc": "The name of the variable."
        },
        {
          "name": "TypeSpecifier",
          "type": "TypeSpecifierSyntax",
          "doc": "The type specifier of the variable.",
          "isOptional": true
        },
        {
          "name": "ValueSpecifier",
          "type": "ValueSpecifierSyntax",
          "doc": "The value specifier of the variable.",
          "isOptional": true
        },
        {
          "name": "Semicolon",
          "type": "SyntaxToken",
          "doc": "The semicolon token."
        }
      ]
    },
    {
      "name": "BlockExpressionSyntax",
      "doc": "A code block expression.",
      "base": "ExpressionSyntax",
      "fields": [
        {
          "name": "OpenBrace",
          "type": "SyntaxToken",
          "doc": "The open brace token."
        },
        {
          "name": "Statements",
          "type": "SyntaxSequence<StatementSyntax>",
          "doc": "The statements in the block."
        },
        {
          "name": "Value",
          "type": "ExpressionSyntax",
          "doc": "The value of the block expression.",
          "isOptional": true
        },
        {
          "name": "CloseBrace",
          "type": "SyntaxToken",
          "doc": "The close brace token."
        }
      ]
    },
    {
      "name": "IfExpressionSyntax",
      "doc": "An if expression.",
      "base": "ExpressionSyntax",
      "fields": [
        {
          "name": "IfKeyword",
          "type": "SyntaxToken",
          "doc": "The if keyword."
        },
        {
          "name": "Condition",
          "type": "ExpressionSyntax",
          "doc": "The condition of the if expression."
        },
        {
          "name": "ThenKeyword",
          "type": "SyntaxToken",
          "doc": "The then keyword."
        },
        {
          "name": "Then",
          "type": "SyntaxNode",
          "doc": "The then part of the if expression."
        },
        {
          "name": "ElseKeyword",
          "type": "SyntaxToken",
          "doc": "The else keyword.",
          "isOptional": true
        },
        {
          "name": "Else",
          "type": "SyntaxNode",
          "doc": "The else part of the if expression.",
          "isOptional": true
        }
      ]
    },
    {
      "name": "WhileExpressionSyntax",
      "doc": "A while expression.",
      "base": "ExpressionSyntax",
      "fields": [
        {
          "name": "WhileKeyword",
          "type": "SyntaxToken",
          "doc": "The while keyword."
        },
        {
          "name": "Condition",
          "type": "ExpressionSyntax",
          "doc": "The condition of the while expression."
        },
        {
          "name": "DoKeyword",
          "type": "SyntaxToken",
          "doc": "The do keyword."
        },
        {
          "name": "Body",
          "type": "SyntaxNode",
          "doc": "The body of the while expression."
        }
      ]
    },
    {
      "name": "GroupExpressionSyntax",
      "doc": "An expression in parenthesis.",
      "base": "SyntaxNode",
      "fields": [
        {
          "name": "OpenParenthesis",
          "type": "SyntaxToken",
          "doc": "The open parenthesis token."
        },
        {
          "name": "SubExpression",
          "type": "ExpressionSyntax",
          "doc": "The wrapped subexpression."
        },
        {
          "name": "CloseParenthesis",
          "type": "SyntaxToken",
          "doc": "The close parenthesis token."
        }
      ]
    },
    {
      "name": "IdentifierSyntax",
      "doc": "A simple identifier.",
      "base": "TypeSyntax",
      "fields": [
        {
          "name": "Identifier",
          "type": "SyntaxToken",
          "doc": "The identifier token."
        }
      ]
    },
    {
      "name": "PrefixUnaryExpressionSyntax",
      "doc": "A prefix unary expression.",
      "base": "ExpressionSyntax",
      "fields": [
        {
          "name": "Operator",
          "type": "SyntaxToken",
          "doc": "The operator token."
        },
        {
          "name": "Operand",
          "type": "ExpressionSyntax",
          "doc": "The operand expression."
        }
      ]
    },
    {
      "name": "BinaryExpressionSyntax",
      "doc": "A binary expression.",
      "base": "ExpressionSyntax",
      "fields": [
        {
          "name": "Left",
          "type": "ExpressionSyntax",
          "doc": "The left operand."
        },
        {
          "name": "Operator",
          "type": "SyntaxToken",
          "doc": "The operator token."
        },
        {
          "name": "Right",
          "type": "ExpressionSyntax",
          "doc": "The right operand."
        }
      ]
    },
    {
      "name": "CallExpressionSyntax",
      "doc": "A call expression.",
      "base": "ExpressionSyntax",
      "fields": [
        {
          "name": "Called",
          "type": "ExpressionSyntax",
          "doc": "The called expression."
        },
        {
          "name": "Arguments",
          "type": "ArgumentListSyntax",
          "doc": "The argument list."
        }
      ]
    }
  ]
}